{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2bb10794-ee82-4219-9b0d-31deadd4fd75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Id       EmployeeName                                        JobTitle  \\\n",
      "0   1     NATHANIEL FORD  GENERAL MANAGER-METROPOLITAN TRANSIT AUTHORITY   \n",
      "1   2       GARY JIMENEZ                 CAPTAIN III (POLICE DEPARTMENT)   \n",
      "2   3     ALBERT PARDINI                 CAPTAIN III (POLICE DEPARTMENT)   \n",
      "3   4  CHRISTOPHER CHONG            WIRE ROPE CABLE MAINTENANCE MECHANIC   \n",
      "4   5    PATRICK GARDNER    DEPUTY CHIEF OF DEPARTMENT,(FIRE DEPARTMENT)   \n",
      "\n",
      "     BasePay  OvertimePay   OtherPay  Benefits   TotalPay  TotalPayBenefits  \\\n",
      "0  167411.18         0.00  400184.25       NaN  567595.43         567595.43   \n",
      "1  155966.02    245131.88  137811.38       NaN  538909.28         538909.28   \n",
      "2  212739.13    106088.18   16452.60       NaN  335279.91         335279.91   \n",
      "3   77916.00     56120.71  198306.90       NaN  332343.61         332343.61   \n",
      "4  134401.60      9737.00  182234.59       NaN  326373.19         326373.19   \n",
      "\n",
      "   Year  Notes         Agency  Status  \n",
      "0  2011    NaN  San Francisco     NaN  \n",
      "1  2011    NaN  San Francisco     NaN  \n",
      "2  2011    NaN  San Francisco     NaN  \n",
      "3  2011    NaN  San Francisco     NaN  \n",
      "4  2011    NaN  San Francisco     NaN  \n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 148654 entries, 0 to 148653\n",
      "Data columns (total 13 columns):\n",
      " #   Column            Non-Null Count   Dtype  \n",
      "---  ------            --------------   -----  \n",
      " 0   Id                148654 non-null  int64  \n",
      " 1   EmployeeName      148654 non-null  object \n",
      " 2   JobTitle          148654 non-null  object \n",
      " 3   BasePay           148045 non-null  float64\n",
      " 4   OvertimePay       148650 non-null  float64\n",
      " 5   OtherPay          148650 non-null  float64\n",
      " 6   Benefits          112491 non-null  float64\n",
      " 7   TotalPay          148654 non-null  float64\n",
      " 8   TotalPayBenefits  148654 non-null  float64\n",
      " 9   Year              148654 non-null  int64  \n",
      " 10  Notes             0 non-null       float64\n",
      " 11  Agency            148654 non-null  object \n",
      " 12  Status            0 non-null       float64\n",
      "dtypes: float64(8), int64(2), object(3)\n",
      "memory usage: 14.7+ MB\n",
      "None\n",
      "Mean BasePay: 66325.4488404877\n",
      "Maximum OvertimePay: 245131.88\n",
      "Joseph Driscoll's Job Title: CAPTAIN, FIRE SUPPRESSION\n",
      "Joseph Driscoll's Total Pay: 270324.91\n",
      "Employee with Maximum Total Pay: NATHANIEL FORD\n",
      "Employee with Minimum Total Pay: Joe Lopez\n",
      "Mean BasePay Grouped by Year:\n",
      "Year\n",
      "2011    63595.956517\n",
      "2012    65436.406857\n",
      "2013    69630.030216\n",
      "2014    66564.421924\n",
      "Name: BasePay, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Read the CSV file\n",
    "sal = pd.read_csv('Salaries.csv')\n",
    "\n",
    "print(sal.head())\n",
    "print(sal.info())\n",
    "\n",
    "# Clean 'BasePay' column by converting non-numeric values to NaN\n",
    "sal['BasePay'] = pd.to_numeric(sal['BasePay'], errors='coerce')\n",
    "\n",
    "# Calculate mean BasePay\n",
    "mean_base_pay = sal['BasePay'].mean()\n",
    "print(f\"Mean BasePay: {mean_base_pay}\")\n",
    "\n",
    "# Find the maximum OvertimePay\n",
    "max_overtime_pay = sal['OvertimePay'].max()\n",
    "print(f\"Maximum OvertimePay: {max_overtime_pay}\")\n",
    "\n",
    "# Get JobTitle for employee Joseph Driscoll\n",
    "joseph_job_title = sal.loc[sal['EmployeeName'] == 'JOSEPH DRISCOLL', 'JobTitle'].values[0]\n",
    "print(f\"Joseph Driscoll's Job Title: {joseph_job_title}\")\n",
    "\n",
    "# Get TotalPayBenefits for employee Joseph Driscoll\n",
    "joseph_total_pay = sal.loc[sal['EmployeeName'] == 'JOSEPH DRISCOLL', 'TotalPayBenefits'].values[0]\n",
    "print(f\"Joseph Driscoll's Total Pay: {joseph_total_pay}\")\n",
    "\n",
    "# Find employee with the maximum TotalPayBenefits\n",
    "max_total_pay_employee = sal.loc[sal['TotalPayBenefits'].idxmax()]\n",
    "print(f\"Employee with Maximum Total Pay: {max_total_pay_employee['EmployeeName']}\")\n",
    "\n",
    "# Find employee with the minimum TotalPayBenefits\n",
    "min_total_pay_employee = sal.loc[sal['TotalPayBenefits'].idxmin()]\n",
    "print(f\"Employee with Minimum Total Pay: {min_total_pay_employee['EmployeeName']}\")\n",
    "\n",
    "# Calculate mean BasePay grouped by Year\n",
    "mean_base_pay_by_year = sal.groupby('Year')['BasePay'].mean()\n",
    "print(f\"Mean BasePay Grouped by Year:\\n{mean_base_pay_by_year}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "534f46e9-73da-4e13-8a02-f4c7889b98f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of unique Job Titles: 2159\n",
      "Top 5 Job Titles and their counts:\n",
      "JobTitle\n",
      "Transit Operator                7036\n",
      "Special Nurse                   4389\n",
      "Registered Nurse                3736\n",
      "Public Svc Aide-Public Works    2518\n",
      "Police Officer 3                2421\n",
      "Name: count, dtype: int64\n",
      "Number of Job Titles with only one occurrence in 2013: 202\n",
      "Number of Job Titles containing 'chief': 627\n",
      "Correlation between 'title_len' and 'TotalPayBenefits': -0.03687844593260901\n"
     ]
    }
   ],
   "source": [
    "# Get the number of unique job titles\n",
    "unique_job_titles = sal['JobTitle'].nunique()\n",
    "print(f\"Number of unique Job Titles: {unique_job_titles}\")\n",
    "\n",
    "# Get the top 5 most common job titles and their counts\n",
    "top_5_job_titles = sal['JobTitle'].value_counts().head(5)\n",
    "print(f\"Top 5 Job Titles and their counts:\\n{top_5_job_titles}\")\n",
    "\n",
    "# Count the number of job titles with only one occurrence in 2013\n",
    "one_occurrence_2013 = sum(sal[sal['Year'] == 2013]['JobTitle'].value_counts() == 1)\n",
    "print(f\"Number of Job Titles with only one occurrence in 2013: {one_occurrence_2013}\")\n",
    "\n",
    "# Function to check if 'chief' is in the job title\n",
    "def chief_string(title):\n",
    "    return 'chief' in title.lower()\n",
    "\n",
    "# Count job titles containing 'chief' (case insensitive)\n",
    "chief_titles_count = sum(sal['JobTitle'].apply(lambda x: chief_string(x)))\n",
    "print(f\"Number of Job Titles containing 'chief': {chief_titles_count}\")\n",
    "\n",
    "# Create a new column 'title_len' with the length of each job title\n",
    "sal['title_len'] = sal['JobTitle'].apply(len)\n",
    "\n",
    "# Calculate the correlation between 'title_len' and 'TotalPayBenefits'\n",
    "title_len_pay_corr = sal[['title_len', 'TotalPayBenefits']].corr().iloc[0, 1]\n",
    "print(f\"Correlation between 'title_len' and 'TotalPayBenefits': {title_len_pay_corr}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d56591d-876f-4532-bb00-b408994abc33",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
